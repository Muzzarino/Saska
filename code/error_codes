validation layer - vkFlushMappedMemoryRanges: Size in pMemRanges[0] is 0x6e4, which is not a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize (0x40). The Vulkan spec states: If size is not equal to VK_WHOLE_SIZE, size must either be a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize, or offset plus size must equal the size of memory. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMappedMemoryRange-size-01390)
validation layer - vkFlushMappedMemoryRanges: Size in pMemRanges[0] is 0x6e4, which is not a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize (0x40). The Vulkan spec states: If size is not equal to VK_WHOLE_SIZE, size must either be a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize, or offset plus size must equal the size of memory. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMappedMemoryRange-size-01390)
JSON > loading render passes
JSON > loading framebuffers
JSON > loading descriptors
JSON > loading pipelines
validation layer - Shader requires VkPhysicalDeviceFeatures::geometryShader but is not enabled on the device
validation layer - Shader requires VkPhysicalDeviceFeatures::geometryShader but is not enabled on the device
validation layer - geometry shader writes to output location 1.0 which is not consumed by fragment shader
validation layer - vkCreateGraphicsPipelines parameter, VkPolygonMode pCreateInfos->pRasterizationState->polygonMode cannot be VK_POLYGON_MODE_POINT or VK_POLYGON_MODE_LINE if VkPhysicalDeviceFeatures->fillModeNonSolid is false.
validation layer - Shader requires VkPhysicalDeviceFeatures::geometryShader but is not enabled on the device
validation layer - vkCreatePipelineLayout() call has push constants index 0 with size 150. Size must be a multiple of 4. The Vulkan spec states: size must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPushConstantRange-size-00297)
validation layer - Push constant range covering variable starting at offset 0 not accessible from stage VK_SHADER_STAGE_VERTEX_BIT
validation layer - vkCreateGraphicsPipelines parameter, VkPolygonMode pCreateInfos->pRasterizationState->polygonMode cannot be VK_POLYGON_MODE_POINT or VK_POLYGON_MODE_LINE if VkPhysicalDeviceFeatures->fillModeNonSolid is false.
validation layer - Vertex attribute at location 0 not consumed by vertex shader
validation layer - Vertex attribute at location 1 not consumed by vertex shader
validation layer - Shader requires VkPhysicalDeviceFeatures::geometryShader but is not enabled on the device
validation layer - Fence 0xd submitted in SIGNALED state.  Fences must be reset before being submitted
validation layer - vkFlushMappedMemoryRanges: Size in pMemRanges[0] is 0x6e4, which is not a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize (0x40). The Vulkan spec states: If size is not equal to VK_WHOLE_SIZE, size must either be a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize, or offset plus size must equal the size of memory. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMappedMemoryRange-size-01390)
validation layer - vkBeginCommandBuffer(): Secondary Command Buffer (0x23136bee6b0) must have inheritance info. The Vulkan spec states: If commandBuffer is a secondary command buffer, the pInheritanceInfo member of pBeginInfo must be a valid VkCommandBufferInheritanceInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00051)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x62)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x62)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkBeginCommandBuffer(): Secondary Command Buffer (0x23136c500d0) must have inheritance info. The Vulkan spec states: If commandBuffer is a secondary command buffer, the pInheritanceInfo member of pBeginInfo must be a valid VkCommandBufferInheritanceInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00051)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (76),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x9), offset (0), and size (160) in pipeline layout 0x76. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x77)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (76),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x9), offset (0), and size (160) in pipeline layout 0x76. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x77)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkCmdExecuteCommands() cannot be called in a subpass using inline commands.
validation layer - command buffer object 0x23136beb430: Dynamic line width state not set for this command buffer.. The Vulkan spec states: If the VkPipeline object bound to the pipeline bind point used by this command requires any dynamic state, that state must have been set for commandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-commandBuffer-02701)
validation layer - command buffer object 0x23136beb430: Dynamic line width state not set for this command buffer.. The Vulkan spec states: If the VkPipeline object bound to the pipeline bind point used by this command requires any dynamic state, that state must have been set for commandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-commandBuffer-02701)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (64),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x10), offset (0), and size (150) in pipeline layout 0x69. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - vkCmdPushConstants(): stageFlags = 0x1, VkPushConstantRange in pipeline layout 0x69 overlapping offset = 0 and size = 64, do not contain stageFlags 0x1. The Vulkan spec states: For each byte in the range specified by offset and size and for each shader stage in stageFlags, there must be a push constant range in layout that includes that byte and that stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01795)
validation layer - Fence 0xd is in use. The Vulkan spec states: Each element of pFences must not be currently associated with any queue command that has not yet completed execution on that queue (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetFences-pFences-01123)
validation layer - Fence 0xd submitted in SIGNALED state.  Fences must be reset before being submitted
validation layer - vkFlushMappedMemoryRanges: Size in pMemRanges[0] is 0x6e4, which is not a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize (0x40). The Vulkan spec states: If size is not equal to VK_WHOLE_SIZE, size must either be a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize, or offset plus size must equal the size of memory. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMappedMemoryRange-size-01390)
validation layer - Call to vkBeginCommandBuffer() on command buffer (0x23136beb430) attempts to implicitly reset cmdBuffer created from command pool (0xa) that does NOT have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT bit set. The Vulkan spec states: If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
validation layer - vkBeginCommandBuffer(): Secondary Command Buffer (0x23136bee6b0) must have inheritance info. The Vulkan spec states: If commandBuffer is a secondary command buffer, the pInheritanceInfo member of pBeginInfo must be a valid VkCommandBufferInheritanceInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00051)
validation layer - Call to vkBeginCommandBuffer() on command buffer (0x23136bee6b0) attempts to implicitly reset cmdBuffer created from command pool (0xa) that does NOT have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT bit set. The Vulkan spec states: If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x62)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x62)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkBeginCommandBuffer(): Secondary Command Buffer (0x23136c500d0) must have inheritance info. The Vulkan spec states: If commandBuffer is a secondary command buffer, the pInheritanceInfo member of pBeginInfo must be a valid VkCommandBufferInheritanceInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00051)
validation layer - Call to vkBeginCommandBuffer() on command buffer (0x23136c500d0) attempts to implicitly reset cmdBuffer created from command pool (0xa) that does NOT have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT bit set. The Vulkan spec states: If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (76),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x9), offset (0), and size (160) in pipeline layout 0x76. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x77)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (76),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x9), offset (0), and size (160) in pipeline layout 0x76. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x77)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkCmdExecuteCommands() cannot be called in a subpass using inline commands.
validation layer - command buffer object 0x23136beb430: Dynamic line width state not set for this command buffer.. The Vulkan spec states: If the VkPipeline object bound to the pipeline bind point used by this command requires any dynamic state, that state must have been set for commandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-commandBuffer-02701)
validation layer - command buffer object 0x23136beb430: Dynamic line width state not set for this command buffer.. The Vulkan spec states: If the VkPipeline object bound to the pipeline bind point used by this command requires any dynamic state, that state must have been set for commandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-commandBuffer-02701)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (64),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x10), offset (0), and size (150) in pipeline layout 0x69. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - vkCmdPushConstants(): stageFlags = 0x1, VkPushConstantRange in pipeline layout 0x69 overlapping offset = 0 and size = 64, do not contain stageFlags 0x1. The Vulkan spec states: For each byte in the range specified by offset and size and for each shader stage in stageFlags, there must be a push constant range in layout that includes that byte and that stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01795)
validation layer - Fence 0xd is in use. The Vulkan spec states: Each element of pFences must not be currently associated with any queue command that has not yet completed execution on that queue (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetFences-pFences-01123)
validation layer - Fence 0xd submitted in SIGNALED state.  Fences must be reset before being submitted
validation layer - vkFlushMappedMemoryRanges: Size in pMemRanges[0] is 0x6e4, which is not a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize (0x40). The Vulkan spec states: If size is not equal to VK_WHOLE_SIZE, size must either be a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize, or offset plus size must equal the size of memory. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMappedMemoryRange-size-01390)
validation layer - Call to vkBeginCommandBuffer() on command buffer (0x23136beb430) attempts to implicitly reset cmdBuffer created from command pool (0xa) that does NOT have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT bit set. The Vulkan spec states: If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
validation layer - vkBeginCommandBuffer(): Secondary Command Buffer (0x23136bee6b0) must have inheritance info. The Vulkan spec states: If commandBuffer is a secondary command buffer, the pInheritanceInfo member of pBeginInfo must be a valid VkCommandBufferInheritanceInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00051)
validation layer - Call to vkBeginCommandBuffer() on command buffer (0x23136bee6b0) attempts to implicitly reset cmdBuffer created from command pool (0xa) that does NOT have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT bit set. The Vulkan spec states: If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x62)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x62)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkBeginCommandBuffer(): Secondary Command Buffer (0x23136c500d0) must have inheritance info. The Vulkan spec states: If commandBuffer is a secondary command buffer, the pInheritanceInfo member of pBeginInfo must be a valid VkCommandBufferInheritanceInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00051)
validation layer - Call to vkBeginCommandBuffer() on command buffer (0x23136c500d0) attempts to implicitly reset cmdBuffer created from command pool (0xa) that does NOT have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT bit set. The Vulkan spec states: If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (76),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x9), offset (0), and size (160) in pipeline layout 0x76. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x77)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (76),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x9), offset (0), and size (160) in pipeline layout 0x76. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x77)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkCmdExecuteCommands() cannot be called in a subpass using inline commands.
validation layer - command buffer object 0x23136beb430: Dynamic line width state not set for this command buffer.. The Vulkan spec states: If the VkPipeline object bound to the pipeline bind point used by this command requires any dynamic state, that state must have been set for commandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-commandBuffer-02701)
validation layer - command buffer object 0x23136beb430: Dynamic line width state not set for this command buffer.. The Vulkan spec states: If the VkPipeline object bound to the pipeline bind point used by this command requires any dynamic state, that state must have been set for commandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-commandBuffer-02701)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (64),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x10), offset (0), and size (150) in pipeline layout 0x69. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - vkCmdPushConstants(): stageFlags = 0x1, VkPushConstantRange in pipeline layout 0x69 overlapping offset = 0 and size = 64, do not contain stageFlags 0x1. The Vulkan spec states: For each byte in the range specified by offset and size and for each shader stage in stageFlags, there must be a push constant range in layout that includes that byte and that stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01795)
validation layer - Fence 0xd is in use. The Vulkan spec states: Each element of pFences must not be currently associated with any queue command that has not yet completed execution on that queue (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetFences-pFences-01123)
validation layer - Fence 0xd submitted in SIGNALED state.  Fences must be reset before being submitted
validation layer - vkFlushMappedMemoryRanges: Size in pMemRanges[0] is 0x6e4, which is not a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize (0x40). The Vulkan spec states: If size is not equal to VK_WHOLE_SIZE, size must either be a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize, or offset plus size must equal the size of memory. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMappedMemoryRange-size-01390)
validation layer - Call to vkBeginCommandBuffer() on command buffer (0x23136beb430) attempts to implicitly reset cmdBuffer created from command pool (0xa) that does NOT have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT bit set. The Vulkan spec states: If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
validation layer - vkBeginCommandBuffer(): Secondary Command Buffer (0x23136bee6b0) must have inheritance info. The Vulkan spec states: If commandBuffer is a secondary command buffer, the pInheritanceInfo member of pBeginInfo must be a valid VkCommandBufferInheritanceInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00051)
validation layer - Call to vkBeginCommandBuffer() on command buffer (0x23136bee6b0) attempts to implicitly reset cmdBuffer created from command pool (0xa) that does NOT have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT bit set. The Vulkan spec states: If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x62)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x62)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkBeginCommandBuffer(): Secondary Command Buffer (0x23136c500d0) must have inheritance info. The Vulkan spec states: If commandBuffer is a secondary command buffer, the pInheritanceInfo member of pBeginInfo must be a valid VkCommandBufferInheritanceInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00051)
validation layer - Call to vkBeginCommandBuffer() on command buffer (0x23136c500d0) attempts to implicitly reset cmdBuffer created from command pool (0xa) that does NOT have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT bit set. The Vulkan spec states: If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (76),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x9), offset (0), and size (160) in pipeline layout 0x76. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x77)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (76),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x9), offset (0), and size (160) in pipeline layout 0x76. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x77)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkCmdExecuteCommands() cannot be called in a subpass using inline commands.
validation layer - command buffer object 0x23136beb430: Dynamic line width state not set for this command buffer.. The Vulkan spec states: If the VkPipeline object bound to the pipeline bind point used by this command requires any dynamic state, that state must have been set for commandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-commandBuffer-02701)
validation layer - command buffer object 0x23136beb430: Dynamic line width state not set for this command buffer.. The Vulkan spec states: If the VkPipeline object bound to the pipeline bind point used by this command requires any dynamic state, that state must have been set for commandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-commandBuffer-02701)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (64),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x10), offset (0), and size (150) in pipeline layout 0x69. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - vkCmdPushConstants(): stageFlags = 0x1, VkPushConstantRange in pipeline layout 0x69 overlapping offset = 0 and size = 64, do not contain stageFlags 0x1. The Vulkan spec states: For each byte in the range specified by offset and size and for each shader stage in stageFlags, there must be a push constant range in layout that includes that byte and that stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01795)
validation layer - Fence 0xd is in use. The Vulkan spec states: Each element of pFences must not be currently associated with any queue command that has not yet completed execution on that queue (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetFences-pFences-01123)
validation layer - Fence 0xd submitted in SIGNALED state.  Fences must be reset before being submitted
validation layer - vkFlushMappedMemoryRanges: Size in pMemRanges[0] is 0x6e4, which is not a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize (0x40). The Vulkan spec states: If size is not equal to VK_WHOLE_SIZE, size must either be a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize, or offset plus size must equal the size of memory. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMappedMemoryRange-size-01390)
validation layer - Call to vkBeginCommandBuffer() on command buffer (0x23136beb430) attempts to implicitly reset cmdBuffer created from command pool (0xa) that does NOT have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT bit set. The Vulkan spec states: If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
validation layer - vkBeginCommandBuffer(): Secondary Command Buffer (0x23136bee6b0) must have inheritance info. The Vulkan spec states: If commandBuffer is a secondary command buffer, the pInheritanceInfo member of pBeginInfo must be a valid VkCommandBufferInheritanceInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00051)
validation layer - Call to vkBeginCommandBuffer() on command buffer (0x23136bee6b0) attempts to implicitly reset cmdBuffer created from command pool (0xa) that does NOT have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT bit set. The Vulkan spec states: If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x62)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x62)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkBeginCommandBuffer(): Secondary Command Buffer (0x23136c500d0) must have inheritance info. The Vulkan spec states: If commandBuffer is a secondary command buffer, the pInheritanceInfo member of pBeginInfo must be a valid VkCommandBufferInheritanceInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00051)
validation layer - Call to vkBeginCommandBuffer() on command buffer (0x23136c500d0) attempts to implicitly reset cmdBuffer created from command pool (0xa) that does NOT have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT bit set. The Vulkan spec states: If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (76),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x9), offset (0), and size (160) in pipeline layout 0x76. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x77)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (76),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x9), offset (0), and size (160) in pipeline layout 0x76. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x77)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkCmdExecuteCommands() cannot be called in a subpass using inline commands.
validation layer - command buffer object 0x23136beb430: Dynamic line width state not set for this command buffer.. The Vulkan spec states: If the VkPipeline object bound to the pipeline bind point used by this command requires any dynamic state, that state must have been set for commandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-commandBuffer-02701)
validation layer - command buffer object 0x23136beb430: Dynamic line width state not set for this command buffer.. The Vulkan spec states: If the VkPipeline object bound to the pipeline bind point used by this command requires any dynamic state, that state must have been set for commandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-commandBuffer-02701)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (64),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x10), offset (0), and size (150) in pipeline layout 0x69. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - vkCmdPushConstants(): stageFlags = 0x1, VkPushConstantRange in pipeline layout 0x69 overlapping offset = 0 and size = 64, do not contain stageFlags 0x1. The Vulkan spec states: For each byte in the range specified by offset and size and for each shader stage in stageFlags, there must be a push constant range in layout that includes that byte and that stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01795)
validation layer - Fence 0xd is in use. The Vulkan spec states: Each element of pFences must not be currently associated with any queue command that has not yet completed execution on that queue (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetFences-pFences-01123)
validation layer - Fence 0xd submitted in SIGNALED state.  Fences must be reset before being submitted
validation layer - vkFlushMappedMemoryRanges: Size in pMemRanges[0] is 0x6e4, which is not a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize (0x40). The Vulkan spec states: If size is not equal to VK_WHOLE_SIZE, size must either be a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize, or offset plus size must equal the size of memory. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMappedMemoryRange-size-01390)
validation layer - Call to vkBeginCommandBuffer() on command buffer (0x23136beb430) attempts to implicitly reset cmdBuffer created from command pool (0xa) that does NOT have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT bit set. The Vulkan spec states: If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
validation layer - vkBeginCommandBuffer(): Secondary Command Buffer (0x23136bee6b0) must have inheritance info. The Vulkan spec states: If commandBuffer is a secondary command buffer, the pInheritanceInfo member of pBeginInfo must be a valid VkCommandBufferInheritanceInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00051)
validation layer - Call to vkBeginCommandBuffer() on command buffer (0x23136bee6b0) attempts to implicitly reset cmdBuffer created from command pool (0xa) that does NOT have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT bit set. The Vulkan spec states: If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x62)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x62)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkBeginCommandBuffer(): Secondary Command Buffer (0x23136c500d0) must have inheritance info. The Vulkan spec states: If commandBuffer is a secondary command buffer, the pInheritanceInfo member of pBeginInfo must be a valid VkCommandBufferInheritanceInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00051)
validation layer - Call to vkBeginCommandBuffer() on command buffer (0x23136c500d0) attempts to implicitly reset cmdBuffer created from command pool (0xa) that does NOT have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT bit set. The Vulkan spec states: If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (76),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x9), offset (0), and size (160) in pipeline layout 0x76. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x77)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (76),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x9), offset (0), and size (160) in pipeline layout 0x76. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x77)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkCmdExecuteCommands() cannot be called in a subpass using inline commands.
validation layer - command buffer object 0x23136beb430: Dynamic line width state not set for this command buffer.. The Vulkan spec states: If the VkPipeline object bound to the pipeline bind point used by this command requires any dynamic state, that state must have been set for commandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-commandBuffer-02701)
validation layer - command buffer object 0x23136beb430: Dynamic line width state not set for this command buffer.. The Vulkan spec states: If the VkPipeline object bound to the pipeline bind point used by this command requires any dynamic state, that state must have been set for commandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-commandBuffer-02701)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (64),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x10), offset (0), and size (150) in pipeline layout 0x69. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - vkCmdPushConstants(): stageFlags = 0x1, VkPushConstantRange in pipeline layout 0x69 overlapping offset = 0 and size = 64, do not contain stageFlags 0x1. The Vulkan spec states: For each byte in the range specified by offset and size and for each shader stage in stageFlags, there must be a push constant range in layout that includes that byte and that stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01795)
validation layer - Fence 0xd is in use. The Vulkan spec states: Each element of pFences must not be currently associated with any queue command that has not yet completed execution on that queue (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetFences-pFences-01123)
validation layer - Fence 0xd submitted in SIGNALED state.  Fences must be reset before being submitted
validation layer - vkFlushMappedMemoryRanges: Size in pMemRanges[0] is 0x6e4, which is not a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize (0x40). The Vulkan spec states: If size is not equal to VK_WHOLE_SIZE, size must either be a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize, or offset plus size must equal the size of memory. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMappedMemoryRange-size-01390)
validation layer - Call to vkBeginCommandBuffer() on command buffer (0x23136beb430) attempts to implicitly reset cmdBuffer created from command pool (0xa) that does NOT have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT bit set. The Vulkan spec states: If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
validation layer - vkBeginCommandBuffer(): Secondary Command Buffer (0x23136bee6b0) must have inheritance info. The Vulkan spec states: If commandBuffer is a secondary command buffer, the pInheritanceInfo member of pBeginInfo must be a valid VkCommandBufferInheritanceInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00051)
validation layer - Call to vkBeginCommandBuffer() on command buffer (0x23136bee6b0) attempts to implicitly reset cmdBuffer created from command pool (0xa) that does NOT have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT bit set. The Vulkan spec states: If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x62)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x62)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkBeginCommandBuffer(): Secondary Command Buffer (0x23136c500d0) must have inheritance info. The Vulkan spec states: If commandBuffer is a secondary command buffer, the pInheritanceInfo member of pBeginInfo must be a valid VkCommandBufferInheritanceInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00051)
validation layer - Call to vkBeginCommandBuffer() on command buffer (0x23136c500d0) attempts to implicitly reset cmdBuffer created from command pool (0xa) that does NOT have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT bit set. The Vulkan spec states: If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (76),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x9), offset (0), and size (160) in pipeline layout 0x76. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x77)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (76),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x9), offset (0), and size (160) in pipeline layout 0x76. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x77)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkCmdExecuteCommands() cannot be called in a subpass using inline commands.
validation layer - command buffer object 0x23136beb430: Dynamic line width state not set for this command buffer.. The Vulkan spec states: If the VkPipeline object bound to the pipeline bind point used by this command requires any dynamic state, that state must have been set for commandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-commandBuffer-02701)
validation layer - command buffer object 0x23136beb430: Dynamic line width state not set for this command buffer.. The Vulkan spec states: If the VkPipeline object bound to the pipeline bind point used by this command requires any dynamic state, that state must have been set for commandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-commandBuffer-02701)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (64),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x10), offset (0), and size (150) in pipeline layout 0x69. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - vkCmdPushConstants(): stageFlags = 0x1, VkPushConstantRange in pipeline layout 0x69 overlapping offset = 0 and size = 64, do not contain stageFlags 0x1. The Vulkan spec states: For each byte in the range specified by offset and size and for each shader stage in stageFlags, there must be a push constant range in layout that includes that byte and that stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01795)
validation layer - Fence 0xd is in use. The Vulkan spec states: Each element of pFences must not be currently associated with any queue command that has not yet completed execution on that queue (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetFences-pFences-01123)
validation layer - Fence 0xd submitted in SIGNALED state.  Fences must be reset before being submitted
validation layer - vkFlushMappedMemoryRanges: Size in pMemRanges[0] is 0x6e4, which is not a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize (0x40). The Vulkan spec states: If size is not equal to VK_WHOLE_SIZE, size must either be a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize, or offset plus size must equal the size of memory. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMappedMemoryRange-size-01390)
validation layer - Call to vkBeginCommandBuffer() on command buffer (0x23136beb430) attempts to implicitly reset cmdBuffer created from command pool (0xa) that does NOT have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT bit set. The Vulkan spec states: If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
validation layer - vkBeginCommandBuffer(): Secondary Command Buffer (0x23136bee6b0) must have inheritance info. The Vulkan spec states: If commandBuffer is a secondary command buffer, the pInheritanceInfo member of pBeginInfo must be a valid VkCommandBufferInheritanceInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00051)
validation layer - Call to vkBeginCommandBuffer() on command buffer (0x23136bee6b0) attempts to implicitly reset cmdBuffer created from command pool (0xa) that does NOT have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT bit set. The Vulkan spec states: If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x62)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x62)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkBeginCommandBuffer(): Secondary Command Buffer (0x23136c500d0) must have inheritance info. The Vulkan spec states: If commandBuffer is a secondary command buffer, the pInheritanceInfo member of pBeginInfo must be a valid VkCommandBufferInheritanceInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00051)
validation layer - Call to vkBeginCommandBuffer() on command buffer (0x23136c500d0) attempts to implicitly reset cmdBuffer created from command pool (0xa) that does NOT have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT bit set. The Vulkan spec states: If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (76),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x9), offset (0), and size (160) in pipeline layout 0x76. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x77)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (76),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x9), offset (0), and size (160) in pipeline layout 0x76. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x77)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkCmdExecuteCommands() cannot be called in a subpass using inline commands.
validation layer - command buffer object 0x23136beb430: Dynamic line width state not set for this command buffer.. The Vulkan spec states: If the VkPipeline object bound to the pipeline bind point used by this command requires any dynamic state, that state must have been set for commandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-commandBuffer-02701)
validation layer - command buffer object 0x23136beb430: Dynamic line width state not set for this command buffer.. The Vulkan spec states: If the VkPipeline object bound to the pipeline bind point used by this command requires any dynamic state, that state must have been set for commandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-commandBuffer-02701)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (64),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x10), offset (0), and size (150) in pipeline layout 0x69. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - vkCmdPushConstants(): stageFlags = 0x1, VkPushConstantRange in pipeline layout 0x69 overlapping offset = 0 and size = 64, do not contain stageFlags 0x1. The Vulkan spec states: For each byte in the range specified by offset and size and for each shader stage in stageFlags, there must be a push constant range in layout that includes that byte and that stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01795)
validation layer - Fence 0xd is in use. The Vulkan spec states: Each element of pFences must not be currently associated with any queue command that has not yet completed execution on that queue (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetFences-pFences-01123)
validation layer - Fence 0xd submitted in SIGNALED state.  Fences must be reset before being submitted
validation layer - vkFlushMappedMemoryRanges: Size in pMemRanges[0] is 0x6e4, which is not a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize (0x40). The Vulkan spec states: If size is not equal to VK_WHOLE_SIZE, size must either be a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize, or offset plus size must equal the size of memory. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMappedMemoryRange-size-01390)
validation layer - Call to vkBeginCommandBuffer() on command buffer (0x23136beb430) attempts to implicitly reset cmdBuffer created from command pool (0xa) that does NOT have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT bit set. The Vulkan spec states: If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
validation layer - vkBeginCommandBuffer(): Secondary Command Buffer (0x23136bee6b0) must have inheritance info. The Vulkan spec states: If commandBuffer is a secondary command buffer, the pInheritanceInfo member of pBeginInfo must be a valid VkCommandBufferInheritanceInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00051)
validation layer - Call to vkBeginCommandBuffer() on command buffer (0x23136bee6b0) attempts to implicitly reset cmdBuffer created from command pool (0xa) that does NOT have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT bit set. The Vulkan spec states: If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x62)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x62)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkBeginCommandBuffer(): Secondary Command Buffer (0x23136c500d0) must have inheritance info. The Vulkan spec states: If commandBuffer is a secondary command buffer, the pInheritanceInfo member of pBeginInfo must be a valid VkCommandBufferInheritanceInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00051)
validation layer - Call to vkBeginCommandBuffer() on command buffer (0x23136c500d0) attempts to implicitly reset cmdBuffer created from command pool (0xa) that does NOT have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT bit set. The Vulkan spec states: If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (76),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x9), offset (0), and size (160) in pipeline layout 0x76. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x77)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (76),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x9), offset (0), and size (160) in pipeline layout 0x76. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - Dynamic viewport(s) 0 are used by pipeline state object, but were not provided via calls to vkCmdSetViewport().
validation layer - No active render pass found at draw-time in Pipeline (0x77)!
validation layer - vkCmdDrawIndexed(): This call must be issued inside an active render pass. The Vulkan spec states: This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
validation layer - vkCmdExecuteCommands() cannot be called in a subpass using inline commands.
validation layer - command buffer object 0x23136beb430: Dynamic line width state not set for this command buffer.. The Vulkan spec states: If the VkPipeline object bound to the pipeline bind point used by this command requires any dynamic state, that state must have been set for commandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-commandBuffer-02701)
validation layer - command buffer object 0x23136beb430: Dynamic line width state not set for this command buffer.. The Vulkan spec states: If the VkPipeline object bound to the pipeline bind point used by this command requires any dynamic state, that state must have been set for commandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-commandBuffer-02701)
validation layer - vkCmdPushConstants(): stageFlags (0x1, offset (0), and size (64),  must contain all stages in overlapping VkPushConstantRange stageFlags (0x10), offset (0), and size (150) in pipeline layout 0x69. The Vulkan spec states: For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
validation layer - vkCmdPushConstants(): stageFlags = 0x1, VkPushConstantRange in pipeline layout 0x69 overlapping offset = 0 and size = 64, do not contain stageFlags 0x1. The Vulkan spec states: For each byte in the range specified by offset and size and for each shader stage in stageFlags, there must be a push constant range in layout that includes that byte and that stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01795)
validation layer - Fence 0xd is in use. The Vulkan spec states: Each element of pFences must not be currently associated with any queue command that has not yet completed execution on that queue (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetFences-pFences-01123)

validation layer - OBJ ERROR : For device 0x23131cdd850, DeviceMemory object 0x12 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, DeviceMemory object 0x16 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, DeviceMemory object 0x29 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, DeviceMemory object 0x21 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, DeviceMemory object 0x19 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, DeviceMemory object 0x1b has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, DeviceMemory object 0x25 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, DeviceMemory object 0x1d has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, DeviceMemory object 0x27 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, DeviceMemory object 0x2e has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, DeviceMemory object 0x43 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Buffer object 0x11 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Buffer object 0x15 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Buffer object 0x28 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Buffer object 0x20 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Buffer object 0x18 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Buffer object 0x1a has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Buffer object 0x24 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Buffer object 0x1c has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Buffer object 0x26 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Image object 0x2d has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Image object 0x42 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ImageView object 0x2f has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ImageView object 0x44 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ShaderModule object 0x51 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ShaderModule object 0x5a has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ShaderModule object 0x52 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ShaderModule object 0x5b has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ShaderModule object 0x53 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ShaderModule object 0x5e has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ShaderModule object 0x56 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ShaderModule object 0x5f has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ShaderModule object 0x57 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ShaderModule object 0x60 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ShaderModule object 0x63 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ShaderModule object 0x64 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ShaderModule object 0x67 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ShaderModule object 0x68 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ShaderModule object 0x6b has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ShaderModule object 0x6c has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ShaderModule object 0x6f has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ShaderModule object 0x70 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ShaderModule object 0x73 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ShaderModule object 0x74 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ShaderModule object 0x75 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ShaderModule object 0x78 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, ShaderModule object 0x79 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, PipelineLayout object 0x5c has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, PipelineLayout object 0x54 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, PipelineLayout object 0x58 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, PipelineLayout object 0x71 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, PipelineLayout object 0x69 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, PipelineLayout object 0x61 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, PipelineLayout object 0x6d has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, PipelineLayout object 0x65 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, PipelineLayout object 0x76 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, PipelineLayout object 0x7a has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, RenderPass object 0x2a has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, RenderPass object 0x2c has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Pipeline object 0x5d has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Pipeline object 0x55 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Pipeline object 0x59 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Pipeline object 0x72 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Pipeline object 0x6a has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Pipeline object 0x62 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Pipeline object 0x6e has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Pipeline object 0x66 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Pipeline object 0x77 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Pipeline object 0x7b has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, DescriptorSetLayout object 0xe has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, DescriptorSetLayout object 0x47 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, DescriptorSetLayout object 0x48 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, DescriptorSetLayout object 0x49 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, DescriptorSetLayout object 0x4a has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Sampler object 0x30 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Sampler object 0x45 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, DescriptorPool object 0x17 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, DescriptorSet object 0x4b has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, DescriptorSet object 0x4c has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, DescriptorSet object 0x4d has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, DescriptorSet object 0x4e has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, DescriptorSet object 0x4f has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, DescriptorSet object 0x50 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Framebuffer object 0x31 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
validation layer - OBJ ERROR : For device 0x23131cdd850, Framebuffer object 0x46 has not been destroyed. The Vulkan spec states: All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)